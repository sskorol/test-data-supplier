import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

plugins {
    id "java-library"
    id "java"
    id "jacoco"
    id "org.sonarqube" version "2.7.1"
    id "com.jfrog.bintray" version "1.8.4"
    id "net.researchgate.release" version "2.8.1"
    id "com.ferranpons.twitterplugin" version "1.1.0"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.64"
    id "com.github.ben-manes.versions" version "0.22.0"
}

group = 'io.github.sskorol'
version = version
description = 'Test Data Supplier is an extended version of common TestNG DataProvider.'

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle".toString()
    projectUrl = "https://github.com/sskorol/test-data-supplier"
    moduleName = 'io.github.sskorol.testdatasupplier'

    aspectjVersion = '1.9.4'
    jacksonVersion = '2.9.9'
    lombokVersion = '1.18.8'
}

apply from: "${gradleScriptDir}/bintray.gradle"
apply from: "${gradleScriptDir}/release.gradle"
apply from: "${gradleScriptDir}/maven-publish.gradle"

sourceCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
    mavenLocal()
}

configurations {
    agent
}

dependencies {
    agent "org.aspectj:aspectjweaver:${aspectjVersion}"
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    annotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    testAnnotationProcessor("org.projectlombok:lombok:${lombokVersion}")
    compile('org.jooq:joor:0.9.12',
            'org.testng:testng:7.0.0',
            'one.util:streamex:0.7.0',
            'io.vavr:vavr:1.0.0-alpha-3',
            "org.aspectj:aspectjrt:${aspectjVersion}",
            'org.reflections:reflections:0.9.11',
            'org.apache.commons:commons-csv:1.7',
            'com.google.code.gson:gson:2.8.5',
            "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}",
            "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}",
    )
    testCompile('org.assertj:assertj-core:3.11.1')
}

jacoco.toolVersion = "0.8.4"
jacocoTestReport {
    reports {
        xml.enabled = true
        xml.destination = file("${buildDir}/reports/jacoco/jacoco.xml")
        html.destination = file("${buildDir}/reports/jacoco")
    }
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
    from sourceSets.main.output
    from("src/main/services") {
        into("META-INF/services")
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
    archiveClassifier.set('sources')
    from sourceSets.main.output
    from("src/main/services") {
        into("META-INF/services")
    }
}

task spiOffJar(type: Jar, dependsOn: classes) {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
    archiveClassifier.set('spi-off')
    from sourceSets.main.output
}

configurations {
    spiOff.extendsFrom(compile)
}

tasks.withType(Javadoc) {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.addStringOption('-module-path', classpath.asPath)
    }
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption('html5', true)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

artifacts {
    spiOff spiOffJar
    archives sourceJar
    archives spiOffJar
    archives javadocJar
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '-Xlint:deprecation'
        ]
        classpath = files()
    }
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
                '-Xlint:deprecation',
        ]
        classpath = files()
    }
}

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }

    useTestNG() {
        suites 'src/test/resources/smoke-suite.xml'
    }

    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                "-javaagent:${configurations.agent.singleFile}",
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.testcases=org.testng',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.listeners=org.testng',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.listeners=ALL-UNNAMED',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.testcases=org.jooq.joor',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.entities=org.jooq.joor',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.entities=com.fasterxml.jackson.databind',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.datasuppliers=org.jooq.joor',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.datasuppliers=org.testng',
                '--add-opens', 'java.base/java.util=one.util.streamex',
                '--add-opens', 'java.base/java.util.stream=one.util.streamex',
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir, sourceSets.test.output.resourcesDir).asPath
        ]
        classpath = files()
    }
}

task gitChangelog(type: GitChangelogTask) {
    file = new File("CHANGELOG.md")
    templateContent = file('gradle/changelog.mustache').getText('UTF-8')
}

twitterPlugin {
    def releaseVersion = project.hasProperty('release.releaseVersion') ? project.property('release.releaseVersion') : System.getenv('RELEASE_VERSION')
    def tweet = "Test Data Supplier ${releaseVersion} has been released: ${project.projectUrl} #testng #testdatasupplier #java"

    consumerKey = project.hasProperty('consumerKey') ? project.property('consumerKey') : System.getenv('CONSUMER_KEY')
    consumerSecret = project.hasProperty('consumerSecret') ? project.property('consumerSecret') : System.getenv('CONSUMER_SECRET')
    accessToken = project.hasProperty('accessToken') ? project.property('accessToken') : System.getenv('ACCESS_TOKEN')
    accessTokenSecret = project.hasProperty('accessTokenSecret') ? project.property('accessTokenSecret') : System.getenv('ACCESS_TOKEN_SECRET')
    message = "${tweet}"
}

afterReleaseBuild.dependsOn createTweet, gitChangelog
