import se.bjurr.gitchangelog.plugin.gradle.GitChangelogTask

plugins {
    id "java-library"
    id "java"
    id "org.sonarqube" version "2.7"
    id "com.jfrog.bintray" version "1.8.4"
    id "net.researchgate.release" version "2.8.0"
    id "com.ferranpons.twitterplugin" version "1.0.2"
    id "se.bjurr.gitchangelog.git-changelog-gradle-plugin" version "1.60"
    id "com.github.ben-manes.versions" version "0.20.0"
}

group = 'io.github.sskorol'
version = version
description = 'Test Data Supplier is an extended version of common TestNG DataProvider.'

ext {
    gradleScriptDir = "${rootProject.projectDir}/gradle"
    projectUrl = "https://github.com/sskorol/test-data-supplier"
    moduleName = 'io.github.sskorol.testdatasupplier'

    aspectjVersion = '1.9.2'
}

apply from: "${gradleScriptDir}/bintray.gradle"
apply from: "${gradleScriptDir}/release.gradle"
apply from: "${gradleScriptDir}/maven-publish.gradle"

sourceCompatibility = JavaVersion.VERSION_11

repositories {
    jcenter()
    mavenLocal()
}

configurations {
    jacoco
    jacocoRuntime
    agent
}

dependencies {
    agent "org.aspectj:aspectjweaver:${aspectjVersion}"
    compile('org.jooq:joor:0.9.10',
            'org.testng:testng:6.14.3',
            'one.util:streamex:0.6.8',
            'io.vavr:vavr:0.10.0',
            "org.aspectj:aspectjrt:${aspectjVersion}",
            'org.reflections:reflections:0.9.11',
            'org.apache.commons:commons-csv:1.6',
            'com.google.code.gson:gson:2.8.5',
            'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.8',
            'com.fasterxml.jackson.core:jackson-databind:2.9.8'
    )
    testCompile 'org.assertj:assertj-core:3.11.1'
    jacoco group: 'org.jacoco', name: 'org.jacoco.ant', version: '0.8.3', classifier: 'nodeps'
    jacocoRuntime group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.3', classifier: 'runtime'
}

sourceSets.main.output.classesDir = new File(buildDir, "classes/main")

task wrapper(type: Wrapper) {
    gradleVersion = '4.10.2'
}

jar {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
    from sourceSets.main.output
    from("src/main/services") {
        into("META-INF/services")
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
    classifier = 'sources'
    from sourceSets.main.output
    from("src/main/services") {
        into("META-INF/services")
    }
}

task spiOffJar(type: Jar, dependsOn: classes) {
    inputs.property("moduleName", moduleName)
    manifest {
        attributes('Automatic-Module-Name': moduleName)
    }
    classifier = 'spi-off'
    from sourceSets.main.output
}

configurations {
    spiOff.extendsFrom(compile)
}

tasks.withType(Javadoc) {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.addStringOption('-module-path', classpath.asPath)
    }
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addBooleanOption('html5', true)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    spiOff spiOffJar
    archives sourceJar
    archives spiOffJar
    archives javadocJar
}

compileJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

compileTestJava {
    inputs.property("moduleName", moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.srcDirs).asPath,
        ]
        classpath = files()
    }
}

task copyResources << {
    copy {
        from 'src/test/resources'
        into 'build/classes-instrumented'

    }
    copy {
        from 'src/test/resources'
        into 'build/classes/main'
    }
}

test {
    testLogging {
        events "skipped", "failed"
        exceptionFormat "full"
    }

    useTestNG() {
        suites 'src/test/resources/smoke-suite.xml'
    }

    inputs.property("moduleName", moduleName)
    doFirst {
        jvmArgs = [
                "-javaagent:${configurations.agent.singleFile}",
                '--module-path', classpath.asPath,
                '--add-modules', 'ALL-MODULE-PATH',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.testcases=testng',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.listeners=testng',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.testcases=org.jooq.joor',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.entities=org.jooq.joor',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.entities=com.fasterxml.jackson.databind',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.datasuppliers=org.jooq.joor',
                '--add-opens', 'io.github.sskorol.testdatasupplier/io.github.sskorol.datasuppliers=testng',
                '--add-opens', 'java.base/java.util=one.util.streamex',
                '--add-opens', 'java.base/java.util.stream=one.util.streamex',
                '--patch-module', "$moduleName=" + files(sourceSets.test.java.outputDir).asPath
        ]
        classpath = files()
    }
}

test.dependsOn copyResources

task gitChangelog(type: GitChangelogTask) {
    file = new File("CHANGELOG.md")
    templateContent = file('gradle/changelog.mustache').getText('UTF-8')
}

task instrument(dependsOn: ['classes']) {
    ext.outputDir = buildDir.path + '/classes-instrumented'
    doLast {
        ant.taskdef(name: 'instrument',
                classname: 'org.jacoco.ant.InstrumentTask',
                classpath: configurations.jacoco.asPath)
        ant.instrument(destdir: outputDir) {
            fileset(dir: sourceSets.main.output.classesDir)
        }
    }
}

gradle.taskGraph.whenReady { graph ->
    if (graph.hasTask(instrument)) {
        tasks.withType(Test) {
            doFirst {
                systemProperty 'jacoco-agent.destfile', buildDir.path + '/jacoco/tests.exec'
                classpath = files(instrument.outputDir) + classpath + configurations.jacocoRuntime
            }
        }
    }
}

task report(dependsOn: ['instrument', 'test']) {
    doLast {
        ant.taskdef(name: 'report',
                classname: 'org.jacoco.ant.ReportTask',
                classpath: configurations.jacoco.asPath)
        ant.report() {
            executiondata {
                ant.file(file: buildDir.path + '/jacoco/tests.exec')
            }
            structure(name: 'Coverage Report') {
                classfiles {
                    fileset(dir: sourceSets.main.output.classesDir)
                }
                sourcefiles {
                    fileset(dir: 'src/main/java')
                }
            }
            html(destdir: buildDir.path + '/reports/jacoco')
            xml(destfile: buildDir.path + '/reports/jacoco/report.xml')
        }
    }
}

twitterPlugin {
    def releaseVersion = project.hasProperty('release.releaseVersion') ? project.property('release.releaseVersion') : System.getenv('RELEASE_VERSION')
    def tweet = "Test Data Supplier ${releaseVersion} has been released: ${project.projectUrl} #testng #testdatasupplier #java"

    consumerKey = project.hasProperty('consumerKey') ? project.property('consumerKey') : System.getenv('CONSUMER_KEY')
    consumerSecret = project.hasProperty('consumerSecret') ? project.property('consumerSecret') : System.getenv('CONSUMER_SECRET')
    accessToken = project.hasProperty('accessToken') ? project.property('accessToken') : System.getenv('ACCESS_TOKEN')
    accessTokenSecret = project.hasProperty('accessTokenSecret') ? project.property('accessTokenSecret') : System.getenv('ACCESS_TOKEN_SECRET')
    message = "${tweet}"
}

afterReleaseBuild.dependsOn createTweet, gitChangelog
